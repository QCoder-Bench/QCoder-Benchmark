## Problem Statement
You are given an integer $n$ and an <Link href={pagePathEn.qa + "#oracle"}>oracle</Link> $O$.
There exists an integer $L$ such that $0 \leq L \lt 2^n$, and the oracle $O$ satisfies

$$
\ket{x}_n \xrightarrow{O}
\begin{cases}
- \ket{x}_n & (x=L) \\
\ket{x}_n & (x\neq L)
\end{cases}
$$

for any integer $x$ satisfying $0 \leq x \lt 2^n$.

Implement an operation on a quantum circuit $\mathrm{qc}$ with $n$ qubits that prepares a quantum state $\ket{\psi}$ from the zero state, such that $\ket{L}$ is observed with a probability of at least $4/2^n$ upon measurement.

### More Precise Problem Statement
Define the state $\ket{\psi}$ prepared by $\mathrm{qc}$ as
$$
\begin{equation}
\ket{\psi} = \sum_{i=0}^{2^n-1} a_i\ket{i}, \nonumber
\end{equation}
$$
where $a_i$ denotes the probability amplitude of the computational basis state $\ket{i}$.

Implement $\mathrm{qc}$ satisfying following condition:

$$
|a_L|^2 \geq \frac{4}{2^n}
$$

## Constraints
- $3 \leq n \leq 10$
- Integers must be encoded by little-endian, meaning that the least significant bit is on the left.
- Global phase is ignored in judge.
- The submitted code must follow the specified format:

    from qiskit import QuantumCircuit

    """
    You can apply oracle as follows:
    qc.compose(o, inplace=True)
    """


    def solve(n: int, o: QuantumCircuit) -> QuantumCircuit:
        qc = QuantumCircuit(n)
        # Write your code here:

        return qc